@use "sass:math";
@use "sass:meta";

@function -untyped($args...) {
	@each $arg in $args {
		@if meta.type-of($arg) == number and
				math.is-unitless($arg) {
			@return true;
		}
	}
	@return false;
}

@mixin margin-x($arg1, $arg2: null) {
	@if -untyped($arg1, $arg2) {
		@error "margin-x(#{$arg1}#{if($arg2 == null, "", ", #{$arg2}")}): " +
			"Numbers must be of type rem, em, px, etc.";
	}
	margin-left: $arg1;
	margin-right: if($arg2 == null, $arg1, $arg2);
}

@mixin margin-y($arg1, $arg2: null) {
	@if -untyped($arg1, $arg2) {
		@error "margin-y(#{$arg1}#{if($arg2 == null, "", ", #{$arg2}")}): " +
			"Numbers must be of type rem, em, px, etc.";
	}
	margin-top: $arg1;
	margin-bottom: if($arg2 == null, $arg1, $arg2);
}

@mixin padding-x($arg1, $arg2: null) {
	@if -untyped($arg1, $arg2) {
		@error "padding-x(#{$arg1}#{if($arg2 == null, "", ", #{$arg2}")}): " +
			"Numbers must be of type rem, em, px, etc.";
	}
	padding-left: $arg1;
	padding-right: if($arg2 == null, $arg1, $arg2);
}

@mixin padding-y($arg1, $arg2: null) {
	@if -untyped($arg1, $arg2) {
		@error "padding-y(#{$arg1}#{if($arg2 == null, "", ", #{$arg2}")}): " +
			"Numbers must be of type rem, em, px, etc.";
	}
	padding-top: $arg1;
	padding-bottom: if($arg2 == null, $arg1, $arg2);
}

@mixin zero-out($inset: 0) {
	position: absolute;
	top: $inset;
	right: $inset;
	bottom: $inset;
	left: $inset;
	@content;
}

@mixin size($v) {
	width: $v;
	height: $v;
}

@mixin border-x($arg1, $arg2: null) {
	@if -untyped($arg1, $arg2) {
		@error "border-x(#{$arg1}#{if($arg2 == null, "", ", #{$arg2}")}): " +
			"Numbers must be of type rem, em, px, etc.";
	}
	border-left-width: $arg1;
	border-right-width: if($arg2 == null, $arg1, $arg2);
}

@mixin border-y($arg1, $arg2: null) {
	@if -untyped($arg1, $arg2) {
		@error "border-y(#{$arg1}#{if($arg2 == null, "", ", #{$arg2}")}): " +
			"Numbers must be of type rem, em, px, etc.";
	}
	border-top-width: $arg1;
	border-bottom-width: if($arg2 == null, $arg1, $arg2);
}
