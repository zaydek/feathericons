@use "sass:list";
@use "sass:map";
@use "sass:selector";

@use "../tailwind" as *;

$theme-dur-ms: 500ms !default;
$theme-ease: tw(ease, out) !default;
$theme-delay-ms: null !default;

@mixin -transition-impl($dur-ms, $props, $ease, $delay-ms: null) {
	$a: ();
	@each $prop in $props {
		@if not $delay-ms {
			$a: list.append($a, $dur-ms $prop $ease, comma);
		} @else {
			$a: list.append($a, $dur-ms $prop $ease $delay-ms, comma);
		}
	}
	@content;
	transition: $a;
}

@mixin transition($dur-ms, $props, $ease, $delay-ms: null) {
	@if selector.is-superselector(":root", &) {
		// Use @at-root to escape the & context
		@at-root {
			:root:not([data-theme-effect]) {
				@include -transition-impl($dur-ms, $props, $ease, $delay-ms) {
					@content;
				}
			}
		}
	} @else {
		:root:not([data-theme-effect]) & {
			@include -transition-impl($dur-ms, $props, $ease, $delay-ms) {
				@content;
			}
		}
	}
	@content;
}

@mixin theme($theme-map) {
	$keys: ();
	@each $k, $v in $theme-map {
		@if not map.has-key((
			background-color: true,
			border-color: true,
			box-shadow: true,
			color: true,
			fill: true,
			opacity: true,
			stroke: true,
		), $k) {
			@error "theme: Theme property must be " +
				"background-color, border-color, box-shadow, color, fill, opacity, or stroke.";
		}
		$keys: list.append($keys, $k);
	}
	@each $k, $v in $theme-map {
		#{$k}: list.nth($v, 1);
	}
	@include -transition-impl($theme-dur-ms, $keys, $theme-ease, $theme-delay-ms);
	@if selector.is-superselector(":root", &) {
		// Use @at-root to escape the & context
		@at-root {
			:root[data-theme="dark"] {
				@each $k, $v in $theme-map {
					#{$k}: list.nth($v, 2);
				}
			}
		}
	} @else {
		:root[data-theme="dark"] & {
			@each $k, $v in $theme-map {
				#{$k}: list.nth($v, 2);
			}
		}
	}
}
