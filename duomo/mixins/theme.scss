@use "sass:list";
@use "sass:map";
@use "sass:selector";

@use "../tailwind";

@mixin -transition-impl($dur, $props, $ease, $delay: null) {
	$a: ();
	@each $prop in $props {
		@if not $delay {
			$a: list.append($a, $dur $prop $ease, comma);
		} @else {
			$a: list.append($a, $dur $prop $ease $delay, comma);
		}
	}
	@content;
	transition: $a;
}

@mixin transition($dur, $props, $ease, $delay: null) {
	@if selector.is-superselector(":root", &) or
			selector.is-superselector(html, &) {
		// Use @at-root to escape the & context
		@at-root {
			:root:not([data-theme-effect]) {
				@include -transition-impl($dur, $props, $ease, $delay) {
					@content;
				}
			}
		}
	} @else {
		:root:not([data-theme-effect]) & {
			@include -transition-impl($dur, $props, $ease, $delay) {
				@content;
			}
		}
	}
	@content;
}

@mixin -theme-prop-impl($prop, $light, $dark) {
	#{$prop}: $light;
	@if selector.is-superselector(":root", &) or
			selector.is-superselector(html, &) {
		// Use @at-root to escape the & context
		@at-root {
			:root[data-theme="dark"] {
				#{$prop}: $dark;
			}
		}
	} @else {
		:root[data-theme="dark"] & {
			#{$prop}: $dark;
		}
	}
}

@mixin background-color($light, $dark) {
	@include -theme-prop-impl(background-color, $light, $dark);
}
// @mixin background($light, $dark) {
// 	@include -theme-prop-impl(background, $light, $dark);
// }
@mixin border-color($light, $dark) {
	@include -theme-prop-impl(border-color, $light, $dark);
}
@mixin box-shadow($light, $dark) {
	@include -theme-prop-impl(box-shadow, $light, $dark);
}
@mixin color($light, $dark) {
	@include -theme-prop-impl(color, $light, $dark);
}
@mixin fill($light, $dark) {
	@include -theme-prop-impl(fill, $light, $dark);
}
@mixin opacity($light, $dark) {
	@include -theme-prop-impl(opacity, $light, $dark);
}
@mixin stroke($light, $dark) {
	@include -theme-prop-impl(stroke, $light, $dark);
}
