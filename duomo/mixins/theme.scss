@use "sass:list";
@use "sass:map";
@use "sass:selector";

@use "../tailwind";

// $theme-dur: 500ms !default;
// $theme-ease: tailwind.tw(ease-out) !default;
// $theme-delay: null !default;

@mixin -transition-impl($dur, $props, $ease, $delay: null) {
	$a: ();
	@each $prop in $props {
		@if not $delay {
			$a: list.append($a, $dur $prop $ease, comma);
		} @else {
			$a: list.append($a, $dur $prop $ease $delay, comma);
		}
	}
	@content;
	transition: $a;
}

@mixin transition($dur, $props, $ease, $delay: null) {
	@if selector.is-superselector(":root", &) or
			selector.is-superselector(html, &) {
		// Use @at-root to escape the & context
		@at-root {
			:root:not([data-theme-effect]) {
				@include -transition-impl($dur, $props, $ease, $delay) {
					@content;
				}
			}
		}
	} @else {
		:root:not([data-theme-effect]) & {
			@include -transition-impl($dur, $props, $ease, $delay) {
				@content;
			}
		}
	}
	@content;
}

$-theme-props: (
	background-color,
	border-color,
	box-shadow,
	color,
	fill,
	opacity,
	stroke,
);

@mixin theme($theme-map) {
	@each $k, $v in $theme-map {
		@if not list.index($-theme-props, $k) {
			@error "theme: Theme property must be " +
				"background-color, border-color, box-shadow, color, fill, opacity, or stroke.";
		}
	}
	@each $k, $v in $theme-map {
		#{$k}: list.nth($v, 1);
	}
	// @include -transition-impl($theme-dur, $-theme-props, $theme-ease, $theme-delay);
	@if selector.is-superselector(":root", &) or
			selector.is-superselector(html, &) {
		// Use @at-root to escape the & context
		@at-root {
			:root[data-theme="dark"] {
				@each $k, $v in $theme-map {
					#{$k}: list.nth($v, 2);
				}
			}
		}
	} @else {
		:root[data-theme="dark"] & {
			@each $k, $v in $theme-map {
				#{$k}: list.nth($v, 2);
			}
		}
	}
}
