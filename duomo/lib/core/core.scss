@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";

@use "../configuration";
@use "../mixins";
@use "../units";
@use "../utils";

@use "aspect-ratio" as *;
@use "base" as *;
@use "flex" as *;
@use "grid" as *;
@use "hide" as *;
@use "overflow" as *;
@use "position" as *;
@use "z-index" as *;

$-aliases: (
	min-content: min,
	max-content: max,
	100%: full,
	100vw: screen,
	100vh: screen,
	9999px: full,
);

$-breakpoints: (
	sm: configuration.dm(sm),
	md: configuration.dm(md),
	lg: configuration.dm(lg),
	xl: configuration.dm(xl),
);

@function -alias($any) {
	$got: map.get($-aliases, $any);
	@if not $got {
		@return utils.str-escape("" + $any);
	}
	@return $got;
}

@mixin -define($props, $shorthand, $range, $unit, $variants...) {
	@each $v in $range {
		$n: if(meta.type-of($v) == number and $v < 0, "-", "");
		$abs: if(meta.type-of($v) == number, math.abs($v), $v);
		.#{$n}#{$shorthand}-#{-alias($abs)} {
			@include mixins.variants($variants...) {
				@each $prop in $props {
					#{$prop}: units.resolve-unit($v, $unit);
				}
			}
		}
	}
}

@function -range($bounds, $entries...) {
	$min: list.nth($bounds, 1);
	$max: list.nth($bounds, 2);
	@return utils.list-limit(utils.list-merge($entries...), $min, $max);
}

@mixin -utils($breakpoint-k, $breakpoint-v, $variants...) {
	@if not & {
		.container {
			margin-left:  auto; // Center x-axis
			margin-right: auto; // Center x-axis
			width: 100%;
		}
	} @else {
		@at-root {
			.container {
				width: 100%;
				max-width: $breakpoint-v;
			}
		}
	}

	@include position($variants...);

	@include -define((margin), m, -range((-128, 128), configuration.dm(nrange), auto, configuration.dm(range)), rem, $variants...);
	@include -define((margin-left, margin-right), mx, -range((-128, 128), configuration.dm(nrange), auto, configuration.dm(range)), rem, $variants...);
	@include -define((margin-top, margin-bottom), my, -range((-128, 128), configuration.dm(nrange), auto, configuration.dm(range)), rem, $variants...);
	@include -define((margin-top), mt, -range((-128, 128), configuration.dm(nrange), auto, configuration.dm(range)), rem, $variants...);
	@include -define((margin-right), mr, -range((-128, 128), configuration.dm(nrange), auto, configuration.dm(range)), rem, $variants...);
	@include -define((margin-bottom), mb, -range((-128, 128), configuration.dm(nrange), auto, configuration.dm(range)), rem, $variants...);
	@include -define((margin-left), ml, -range((-128, 128), configuration.dm(nrange), auto, configuration.dm(range)), rem, $variants...);

	@include -define((padding), p, -range((0, 128), auto, configuration.dm(range)), rem, $variants...);
	@include -define((padding-left, padding-right), px, -range((0, 128), auto, configuration.dm(range)), rem, $variants...);
	@include -define((padding-top, padding-bottom), py, -range((0, 128), auto, configuration.dm(range)), rem, $variants...);
	@include -define((padding-top), pt, -range((0, 128), auto, configuration.dm(range)), rem, $variants...);
	@include -define((padding-right), pr, -range((0, 128), auto, configuration.dm(range)), rem, $variants...);
	@include -define((padding-bottom), pb, -range((0, 128), auto, configuration.dm(range)), rem, $variants...);
	@include -define((padding-left), pl, -range((0, 128), auto, configuration.dm(range)), rem, $variants...);

	@include flex($variants...);
	@include grid($variants...);
	@include hide($variants...);

	@include -define((width), w, -range((0, 640), auto, configuration.dm(range), min-content, max-content, 100%, 100vw), rem, $variants...);

	@each $k, $v in $-breakpoints {
		.w-#{$k} {
			@include mixins.variants($variants...) {
				width: 100%;
				max-width: $v;
			}
		}
	}

	@include -define((height), h, -range((0, 640), auto, configuration.dm(range), min-content, max-content, 100%, 100vh), rem, $variants...);

	@each $v in (0, 100%, 100vh) {
		.min-h-#{-alias($v)} {
			@include mixins.variants($variants...) {
				min-height: $v;
			}
		}
	}

	@include aspect-ratio($variants...);

	@include -define((border-width), border, -range((0, 8), configuration.dm(range)), rem, $variants...);
	@include -define((border-left-width, border-right-width), border-x, -range((0, 8), configuration.dm(range)), rem, $variants...);
	@include -define((border-top-width, border-bottom-width), border-y, -range((0, 8), configuration.dm(range)), rem, $variants...);
	@include -define((border-top-width), border-top, -range((0, 8), configuration.dm(range)), rem, $variants...);
	@include -define((border-right-width), border-right, -range((0, 8), configuration.dm(range)), rem, $variants...);
	@include -define((border-bottom-width), border-bottom, -range((0, 8), configuration.dm(range)), rem, $variants...);
	@include -define((border-left-width), border-left, -range((0, 8), configuration.dm(range)), rem, $variants...);

	@include -define((border-radius), rounded, -range((0, 32), configuration.dm(range), 9999px), rem, $variants...);
	@include -define((border-top-left-radius, border-top-right-radius), rounded-top, -range((0, 32), configuration.dm(range), 9999px), rem, $variants...);
	@include -define((border-top-right-radius, border-bottom-right-radius), rounded-right, -range((0, 32), configuration.dm(range), 9999px), rem, $variants...);
	@include -define((border-bottom-left-radius, border-bottom-right-radius), rounded-bottom, -range((0, 32), configuration.dm(range), 9999px), rem, $variants...);
	@include -define((border-top-left-radius, border-bottom-left-radius), rounded-left, -range((0, 32), configuration.dm(range), 9999px), rem, $variants...);
	@include -define((border-top-right-radius), rounded-top-right, -range((0, 32), configuration.dm(range), 9999px), rem, $variants...);
	@include -define((border-bottom-right-radius), rounded-bottom-right, -range((0, 32), configuration.dm(range), 9999px), rem, $variants...);
	@include -define((border-bottom-left-radius), rounded-bottom-left, -range((0, 32), configuration.dm(range), 9999px), rem, $variants...);
	@include -define((border-top-left-radius), rounded-top-left, -range((0, 32), configuration.dm(range), 9999px), rem, $variants...);

	@include overflow($variants...);

	@include z-index($variants...);

	@each $v in (none, auto) {
		.pointer-events-#{$v} {
			@include mixins.responsive {
				pointer-events: $v;
			}
		}
	}
}

@mixin core {
	/*! Duomo | MIT | https://github.com/zaydek/duomo */
	@include base;

	[data-debug] * {
		outline: 2px solid rgba(0, 128, 255, 0.5);
		outline-offset: -1px;
	}
	[data-debug] svg * {
		outline: revert;
	}

	[data-debug] .flex-grow:empty {
		position: relative;
		align-self: stretch; // Stretch y-axis
		outline: revert;     // Reset
	}
	[data-debug] .flex-grow:empty::before {
		position: absolute;
		top: -1px;
		right: -1px;
		bottom: -1px;
		left: -1px;
		content: "";
		background-color: rgba(0, 128, 255, 0.1);
	}

	@include -utils(null, null, root);
	@each $k, $v in $-breakpoints {
		@media (min-width: $v) {
			.#{$k} {
				@include -utils($k, $v, responsive);
			}
		}
	}
}
