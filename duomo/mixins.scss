@use "sass:list";
@use "sass:math";
@use "sass:meta";
@use "sass:selector";

@mixin reset {
	@content;
}

@mixin antialiased   { -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; }
@mixin unantialiased { -webkit-font-smoothing: auto; -moz-osx-font-smoothing: auto; }

@mixin padding-x($v) {
	@if meta.type-of($v) == number and
			math.is-unitless($v) {
		@error "padding-x: #{$v} must be of type rem, em, px, etc.";
	}
	padding-left:  $v;
	padding-right: $v;
}

@mixin padding-y($v) {
	@if meta.type-of($v) == number and
			math.is-unitless($v) {
		@error "padding-y: #{$v} must be of type rem, em, px, etc.";
	}
	padding-top:    $v;
	padding-bottom: $v;
}

@mixin margin-x($v)  {
	@if meta.type-of($v) == number and
			math.is-unitless($v) {
		@error "margin-x: #{$v} must be of type rem, em, px, etc.";
	}
	margin-left:  $v;
	margin-right: $v;
}

@mixin margin-y($v)  {
	@if meta.type-of($v) == number and
			math.is-unitless($v) {
		@error "margin-y: #{$v} must be of type rem, em, px, etc.";
	}
	margin-top:    $v;
	margin-bottom: $v;
}

@mixin zero-out($inset: 0) {
	position: absolute;
	top:    $inset;
	right:  $inset;
	bottom: $inset;
	left:   $inset;
	@content;
}

@mixin size($v) {
	width:  $v;
	height: $v;
}

// .foo {
//   @include color(#000, #fff);
//   @include background-color(#fff, #000);
// }
//
@mixin -theme-property($property, $light, $dark) {
	#{$property}: #{$light};
	@if selector.is-superselector(":root", &) {
		// Escape the & context
    @at-root {
      :root[data-theme="dark"] {
        #{$property}: #{$dark};
      }
    }
	} @else {
		:root[data-theme="dark"] & {
			#{$property}: #{$dark};
		}
	}
}

@mixin background-color($light, $dark) {
	@include -theme-property("background-color", $light, $dark);
}
@mixin border-color($light, $dark) {
	@include -theme-property("border-color", $light, $dark);
}
@mixin box-shadow($light, $dark) {
	@include -theme-property("box-shadow", $light, $dark);
}
@mixin color($light, $dark) {
	@include -theme-property("color", $light, $dark);
}
@mixin fill($light, $dark) {
	@include -theme-property("fill", $light, $dark);
}
@mixin opacity($light, $dark) {
	@include -theme-property("opacity", $light, $dark);
}
@mixin stroke($light, $dark) {
	@include -theme-property("stroke", $light, $dark);
}

@mixin border-x($v)  {
	@if meta.type-of($v) == number and
			math.is-unitless($v) {
		@error "border-x: #{$v} must be of type rem, em, px, etc.";
	}
	border-left-width:  $v;
	border-right-width: $v;
}

@mixin border-y($v)  {
	@if meta.type-of($v) == number and
			math.is-unitless($v) {
		@error "border-y: #{$v} must be of type rem, em, px, etc.";
	}
	border-top-width:    $v;
	border-bottom-width: $v;
}
