@use "sass:math";
@use "sass:meta";

@use "configuration";
@use "mixins";
@use "units";
@use "utils";

$-flex-opts: (
	stretch: stretch,
	start: flex-start,
	center: center,
	end: flex-end,
	baseline: baseline,
);

$-flex-wrap-opts: (
	wrap: wrap,
	wrap-reverse: wrap-reverse,
	wrap-none: nowrap,
);

// Reference implementations:
//
// - https://codepen.io/zaydek/pen/wvzyZWy
// - https://codepen.io/zaydek/pen/QWKxYpZ (most recent)
//
@mixin flex($variants...) {
	.flex-row {
		@include mixins.variants($variants...) {
			display: flex;
			flex-direction: row;

			// For .overflow-x-scroll > .flex-row.justify-center
			//
			// Reference implementation: https://codepen.io/zaydek/pen/OJREKbM
			min-width: min-content;
		}
	}
	@if not & {
		.flex-row > * {
			--dm-m-gap: 0;

			// Compensate for flex-basis: var(--dm-m-gap); min-width does not measure
			// flex-basis
			--dm-grow-min-width: var(--dm-m-gap);
		}
	}
	.flex-row > * + * {
		@include mixins.variants($variants...) {
			margin-top: revert;
			margin-left: var(--dm-m-gap);
		}
	}

	// Reference implementations:
	//
	// - https://codepen.io/zaydek/pen/qBaYvWp
	// - https://codepen.io/zaydek/pen/PoGavmE
	//
	.flex-row > .flex-grow:empty:first-child + *,
	.flex-row > .flex-grow:empty,
	.flex-row > .flex-grow:empty + *,
	.flex-row > * + .flex-grow:empty:last-child {
		@include mixins.variants($variants...) {
			margin-left: revert;
		}
	}

	.flex-col {
		@include mixins.variants($variants...) {
			display: flex;
			flex-direction: column;

			// For .overflow-x-scroll > .flex-row.justify-center
			//
			// Reference implementation: https://codepen.io/zaydek/pen/OJREKbM
			min-width: min-content;
		}
	}
	@if not & {
		.flex-col > * {
			--dm-m-gap: 0;

			// Compensate for flex-basis: var(--dm-m-gap); min-width does not measure
			// flex-basis
			--dm-grow-min-width: var(--dm-m-gap);
		}
	}
	.flex-col > * + * {
		@include mixins.variants($variants...) {
			margin-top: var(--dm-m-gap);
			margin-left: revert;
		}
	}

	// Reference implementations:
	//
	// - https://codepen.io/zaydek/pen/qBaYvWp
	// - https://codepen.io/zaydek/pen/PoGavmE
	//
	.flex-col > .flex-grow:empty:first-child + *,
	.flex-col > .flex-grow:empty,
	.flex-col > .flex-grow:empty + *,
	.flex-col > * + .flex-grow:empty:last-child {
		@include mixins.variants($variants...) {
			margin-top: revert;
		}
	}

	// Takes precedence
	@each $k, $v in $-flex-opts {
		.self-#{$k} {
			@include mixins.variants($variants...) {
				justify-self: $v;
				align-self: $v;
			}
		}
	}
	// Takes precedence
	@each $k, $v in $-flex-opts {
		.#{$k} {
			@include mixins.variants($variants...) {
				justify-content: $v;
				align-items: $v;
			}
		}
	}
	@each $k, $v in $-flex-opts {
		.justify-self-#{$k} {
			@include mixins.variants($variants...) {
				justify-self: $v;
			}
		}
	}
	@each $k, $v in $-flex-opts {
		.align-self-#{$k} {
			@include mixins.variants($variants...) {
				align-self: $v;
			}
		}
	}
	@each $k, $v in $-flex-opts {
		.justify-#{$k} {
			@include mixins.variants($variants...) {
				justify-content: $v;
			}
		}
	}
	// @each $k, $v in $-flex-opts {
	// 	.justify-items-#{$k} {
	// 		@include mixins.variants($variants...) {
	// 			justify-items: $v;
	// 		}
	// 	}
	// }
	@each $k, $v in $-flex-opts {
		.align-#{$k} {
			@include mixins.variants($variants...) {
				align-items: $v;
			}
		}
	}
	// @each $k, $v in $-flex-opts {
	// 	.align-content-#{$k} {
	// 		@include mixins.variants($variants...) {
	// 			align-content: $v;
	// 		}
	// 	}
	// }
	@each $k, $v in $-flex-wrap-opts {
		.#{$k} {
			@include mixins.variants($variants...) {
				flex-wrap: $v;
			}
		}
	}

	@each $v in utils.list-limit(configuration.dm(range), 0, 128) {
		$n: if(meta.type-of($v) == number and $v < 0, "-", "");
		$abs: if(meta.type-of($v) == number, math.abs($v), $v);
		.#{$n}m-gap-#{$abs} > * {
			@include mixins.variants($variants...) {
				--dm-m-gap: #{units.rem($v)};
			}
		}
	}

	// Reference implementations:
	//
	// - https://codepen.io/zaydek/pen/qBaYvWp
	// - https://codepen.io/zaydek/pen/PoGavmE
	//
	@if not & {
		.flex-grow {
			flex-grow: 1;
		}

		.flex-grow:empty {
			flex: 1 0 var(--dm-m-gap);

			// For .overflow-x-scroll > .flex-row.justify-center > .flex-grow
			min-width: var(--dm-grow-min-width);
		}

		// Zero-out edges
		.flex-grow:empty:first-child,
		.flex-grow:empty + .flex-grow:empty,
		.flex-grow:empty:last-child {
			flex: 1 0 0;

			// For .overflow-x-scroll > .flex-row.justify-center > .flex-grow
			min-width: 0;
		}
	}

	.flex-wrap {
		@include mixins.variants($variants...) {
			flex-wrap: wrap;
		}
	}
	.flex-wrap-reverse {
		@include mixins.variants($variants...) {
			flex-wrap: wrap-reverse;
		}
	}
}
